# -*- coding: utf-8 -*-
"""
Created on Sun Nov 22 15:30:36 2015

@author: breiche

Project Euler
Even Fibbonaci

Each new term in the Fibonacci sequence is generated by adding the previous 
two terms. By starting with 1 and 2, the first 10 terms will be: 
1,2,3,5,8,13,21,34,55,89,â‹¯ 


By considering the terms in the Fibonacci sequence whose values do not 
exceed N, find the sum of the even-valued terms. 

"""

from math import sqrt
import unittest
import time

class EvenFibonacci(object):
    
    def calc_sum(self, n):
        '''
        Calculates the sum of all even fibonacci numbers
        less than N.
        '''
        s = 0
        for f in self.fibonacci_generator():
            if f >= n: 
                break
            if f % 2 == 0:
                s += f
        return s
       
    def fibonacci_naive(self, n):
        '''
        The slow way to compute the nth Fibonacci number. O(2 ^ n),
        because it will re-compute each of the last two numbers in
        the sequence... gross.
        '''
        if n == 0:
            return 0
        if n == 1:
            return 1
        else:
            return self.fibonacci_naive(n - 1) + self.fibonacci_naive(n-2)
            
    def fibonacci_fast(self, n):
        '''
        The nth Fibonacci number can be computed by solving Binet's formula.
        For more information, see 
        https://en.wikipedia.org/wiki/Jacques_Philippe_Marie_Binet
        '''
        return ((1+sqrt(5))**n-(1-sqrt(5))**n)/(2**n*sqrt(5))
        
    def fibonacci_generator(self):
        '''
        Who needs closed-form expressions when you have generators?
        Uses a python generator to calculate Fibonacci numbers.
        '''
        a, b = 0, 1
        yield a
        yield b 
        while True:
            a, b = b, a+ + b
            yield b

class EvenFibonacciTest(unittest.TestCase):
    def test_fib(self):
        ef = EvenFibonacci()
        result = ef.calc_sum(10)
        self.assertEqual(10, result)
        
    def test_fib2(self):
        ef = EvenFibonacci()
        result = ef.calc_sum(100)
        self.assertEqual(44, result) 
        
    def test_time_fast_v_naive(self):
        ef = EvenFibonacci()
        n = 35
        
        naive_start = time.clock()
        ef.fibonacci_naive(n)
        naive_end = time.clock()
        naive = naive_end - naive_start
        
        fast_start = time.clock()
        ef.fibonacci_fast(n)
        fast_end = time.clock()
        fast = fast_end - fast_start
        
        print "Fast implementation took ", fast, "s. Naive implementation took ", naive, "s."
        self.assertLess(fast, naive)
        
        
        
if __name__ == '__main__':
    unittest.main()
    